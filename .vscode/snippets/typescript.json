{
  // Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:

  "Create a resolver": {
    "prefix": "crtResolver",
    "body": [
      "import { IGraphqlContext } from '@/server';",
      "import { Args } from '@/server/common';",
      "import { PrismaError } from '@/server/utils';",
      "import { $1 } from '@prisma/client';",
      "",
      "/*",
      "* Resolver de $0",
      "*/",
      "export const $1Resolver = {",
      "  Query: {",
      // Format $1 to camelCase
      "    ${1/(.)(.*)/${1:/downcase}${2}/g}s: async (",
      "      _: any,",
      "      { pagination }: Args,",
      "      { prisma }: IGraphqlContext",
      "    ) => {",
      // Format $1 putting the first letter in lowercase
      "      const rows = await prisma.${1/(.)(.*)/${1:/downcase}${2}/g}.findMany({",
      "        skip: pagination?.skip,",
      "        take: pagination?.take,",
      "        where: { deleted: false },",
      "      });",
      "      return rows;",
      "    },",
      "",
      "    ${1/([A-Z][a-z]+)([A-Z][a-z]+)/${1:/downcase}_${2:/downcase}/g}: async (",
      "      _: any,",
      "      { id }: { id: number },",
      "      { prisma }: IGraphqlContext",
      "    ) => {",
      "      return await prisma.${1/(.)(.*)/${1:/downcase}${2}/g}.findUnique({",
      "        where: { id },",
      "      });",
      "    },",
      "  },",
      "  Mutation: {",
      // Format $1 to CamelCase
      "    create${1/(.)(.*)/${1:/upcase}${2}/g}: async (",
      "      _: any,",
      // Format $1 to CapitalCase
      "      { data }: { data: ${1/(.)(.*)/${1:/upcase}${2}/g} },",
      "      { prisma }: IGraphqlContext",
      "    ) => {",
      "      try {",
      "        return await prisma.${1/(.)(.*)/${1:/downcase}${2}/g}.create({",
      "          data: { ...data },",
      "        });",
      "      } catch (error) {",
      "        throw PrismaError.handle(error);",
      "      }",
      "    },",
      "",
      "    update${1/(.)(.*)/${1:/upcase}${2}/g}: async (",
      "      _: any,",
      "      { id, data }: { id: number; data: $1 },",
      "      { prisma }: IGraphqlContext",
      "    ) => {",
      "      try {",
      "        return await prisma.${1/(.)(.*)/${1:/downcase}${2}/g}.update({",
      "          where: { id },",
      "          data: { ...data },",
      "        });",
      "      } catch (error) {",
      "        throw PrismaError.handle(error);",
      "      }",
      "    },",
      "",
      "    delete${1/(.)(.*)/${1:/upcase}${2}/g}: async (",
      "      _: any,",
      "      { id }: { id: number },",
      "      { prisma }: IGraphqlContext",
      "    ) => {",
      "      return await prisma.${1/(.)(.*)/${1:/downcase}${2}/g}.update({",
      "        where: { id },",
      "        data: {",
      "          deletedAt: new Date(),",
      "          deleted: true,",
      "        },",
      "      });",
      "    },",
      "  },",
      "};",
      ""
    ],
    "description": "Create a resolver for a model"
  }
}
