// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ability {
  id          Int       @id @unique @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  role        Role[]
}

model Organization {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
  events    Event[]   @relation("events_on_organization")
  users     User[]    @relation("users_on_organization")
  roles     Role[]    @relation("created_roles")
}

model Role {
  id                      Int           @id @unique @default(autoincrement())
  name                    String        @unique @db.VarChar(50)
  description             String?       @db.VarChar(255)
  organizationId          Int
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  deleted                 Boolean       @default(false)
  deletedAt               DateTime?
  abilities               Ability[]
  users                   User[]        @relation("users")
  user_clients            UserClient[]  @relation("user_client")
  application_permissions Application[] @relation("application_roles")
  organization            Organization? @relation("created_roles", fields: [organizationId], references: [id])
}

model User {
  id                        Int                @id @unique @default(autoincrement())
  name                      String             @db.VarChar(50)
  last_name                 String             @db.VarChar(50)
  email                     String             @unique @db.VarChar(100)
  password                  String             @db.VarChar(255)
  organizationId            Int
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  deleted                   Boolean            @default(false)
  deletedAt                 DateTime?
  roles                     Role[]             @relation("users")
  created_by                User               @relation("created_users", fields: [id], references: [id])
  created_events            Event[]            @relation("created_events")
  staff_of_events           Event[]            @relation("staff_of_events")
  created_users             User[]             @relation("created_users")
  authorized_dealers        AuthorizedDealer[] @relation("authorized_dealers")
  managers_on_cashless_site CashlessSite[]     @relation("managers_on_cashless_site")
  cashless_cashier          CashlessCashier[]  @relation("cashless_cashier")
  opened_money_boxes        MoneyBox[]         @relation("opened_money_boxes")
  closed_money_boxes        MoneyBox[]         @relation("closed_money_boxes")
  notifications             Notification[]     @relation("notifications")
  sended_mails              Mail[]             @relation("sended_mails")
  activities                ActivityLog[]      @relation("activities")
  cashless_designs          CashlessDesign[]   @relation("cashless_designs")
  organization              Organization       @relation("users_on_organization", fields: [organizationId], references: [id])
}

model UserClient {
  id                   Int              @id @unique @default(autoincrement())
  name                 String           @db.VarChar(50)
  last_name            String           @db.VarChar(50)
  email                String           @unique @db.VarChar(100)
  password             String           @db.VarChar(255)
  roleId               Int              @default(6) // <- 6 is the default role for "ASISTENTES"
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deleted              Boolean          @default(false)
  deletedAt            DateTime?
  atendee_of_events    Event[]          @relation("atendee_of_events")
  orders               Order[]          @relation("orders")
  payment_cards        PaymentCard[]
  cashless_mediums     Cashless[]       @relation("cashless_mediums")
  cashless_refills     CashlessRefill[] @relation("cashless_refill")
  notifications        Notification[]   @relation("client_notifications")
  mails                Mail[]           @relation("client_recibed_mails")
  user_client_activity ActivityLog[]    @relation("user_client_activity")
  role                 Role             @relation("user_client", fields: [roleId], references: [id])
}

model Notification {
  id            Int         @id @unique @default(autoincrement())
  title         String      @unique @db.VarChar(50)
  description   String?     @db.VarChar(255)
  redirect_url  String?     @db.VarChar(255)
  is_read       Boolean     @default(false)
  userId        Int?
  user_clientId Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deleted       Boolean     @default(false)
  deletedAt     DateTime?
  user          User?       @relation("notifications", fields: [userId], references: [id])
  user_client   UserClient? @relation("client_notifications", fields: [user_clientId], references: [id])
}

model Mail {
  id            Int         @id @unique @default(autoincrement())
  to            String      @db.VarChar(255)
  subject       String      @db.VarChar(255)
  body          String      @db.Text
  userId        Int?
  user_clientId Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deleted       Boolean     @default(false)
  deletedAt     DateTime?
  user          User?       @relation("sended_mails", fields: [userId], references: [id])
  user_client   UserClient? @relation("client_recibed_mails", fields: [user_clientId], references: [id])
}

enum ActivityLogType {
  CREATE
  UPDATE
  DELETE
  LOGIN
}

model ActivityLog {
  id            Int             @id @unique @default(autoincrement())
  tittle        String          @unique @db.VarChar(50)
  description   String?         @db.VarChar(100)
  useful_link   String?         @db.VarChar(255)
  type          ActivityLogType
  userId        Int?
  user_clientId Int?
  applicationId Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deleted       Boolean         @default(false)
  deletedAt     DateTime?
  user          User?           @relation("activities", fields: [userId], references: [id])
  user_client   UserClient?     @relation("user_client_activity", fields: [user_clientId], references: [id])
  application   Application?    @relation("application_log", fields: [applicationId], references: [id])
}

model Application {
  id               Int           @id @unique @default(autoincrement())
  name             String        @unique @db.VarChar(50)
  description      String?       @db.VarChar(255)
  token            String        @unique @db.VarChar(255)
  expires_in       Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  roleId           Int
  deleted          Boolean       @default(false)
  deletedAt        DateTime?
  role             Role          @relation("application_roles", fields: [roleId], references: [id])
  application_logs ActivityLog[] @relation("application_log")
}

//============================= EVENT MANAGEMENT ================================

model Event {
  id                   Int                @id @unique @default(autoincrement())
  event_key            String?            @unique @db.VarChar(8)
  name                 String             @unique @db.VarChar(50)
  description          String?            @db.VarChar(255)
  event_location       String             @db.VarChar(255)
  event_location_url   String             @db.VarChar(1000)
  start_date           DateTime           @db.Date
  end_date             DateTime?          @db.Date
  start_time           String?            @db.VarChar(5)
  end_time             String?            @db.VarChar(5)
  re_entry             Boolean            @default(false)
  price_from           Decimal?           @default(0) @db.Money
  price_to             Decimal?           @db.Money
  event_logo_url       String?            @db.VarChar(1000)
  event_banner_url     String?            @db.VarChar(1000)
  userId               Int
  organizationId       Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  deleted              Boolean            @default(false)
  deletedAt            DateTime?
  createdBy            User               @relation("created_events", fields: [userId], references: [id])
  event_sub_categories EventSubCategory[] @relation("event_categories")
  staff                User[]             @relation("staff_of_events")
  ateendees            UserClient[]       @relation("atendee_of_events")
  selled_tickets       Ticket[]           @relation("selled_tickets")
  event_social_media   EventSocialMedia[] @relation("event_social_media")
  organization         Organization?      @relation("events_on_organization", fields: [organizationId], references: [id])
  access_types         AccessType[]       @relation("types_of_access_for_event")
  owner_types          OwnerType[]        @relation("owner_types_for_event")
  dealers              AuthorizedDealer[] @relation("dealer_of_event")
}

model EventSocialMedia {
  id          Int       @id @unique @default(autoincrement())
  name        String    @db.VarChar(20)
  description String?   @db.VarChar(255)
  url         String    @db.VarChar(255)
  eventId     Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  event       Event     @relation("event_social_media", fields: [eventId], references: [id])
}

model EventCategory {
  id                   Int                @id @unique @default(autoincrement())
  name                 String             @unique @db.VarChar(50)
  description          String?            @db.VarChar(255)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  deleted              Boolean            @default(false)
  deletedAt            DateTime?
  event_sub_categories EventSubCategory[] @relation("event_sub_categories")
}

model EventSubCategory {
  id               Int           @id @unique @default(autoincrement())
  name             String        @unique @db.VarChar(50)
  event_categoryId Int
  description      String?       @db.VarChar(255)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deleted          Boolean       @default(false)
  deletedAt        DateTime?
  events           Event[]       @relation("event_categories")
  event_category   EventCategory @relation("event_sub_categories", fields: [event_categoryId], references: [id])
}

//===================================== TICKETING =====================================

model AccessType {
  id                    Int       @id @unique @default(autoincrement())
  name                  String    @db.VarChar(15)
  description           String?   @db.VarChar(1000)
  enter_and_exit_option Boolean?  @default(false)
  price                 Decimal   @db.Money
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deletedAt             DateTime?
  eventId               Int
  event                 Event     @relation("types_of_access_for_event", fields: [eventId], references: [id])
  tickets               Ticket[]  @relation("access_type")
}

model OwnerType {
  id             Int       @id @unique @default(autoincrement())
  name           String    @db.VarChar(50)
  description    String?   @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?
  eventId        Int
  organizationId Int
  event          Event     @relation("owner_types_for_event", fields: [eventId], references: [id])
  ticket         Ticket[]  @relation("owner_types")
}

model Ticket {
  id             Int         @id @unique @default(autoincrement())
  note           String?     @db.VarChar(50)
  serial_number  String      @unique @db.VarChar(40)
  price          Decimal     @db.Money
  is_paid        Boolean     @default(false)
  is_used        Boolean?    @default(false)
  service_charge Decimal     @db.Money
  eventId        Int
  access_typeId  Int?
  owner_typeId   Int?
  orderId        Int?
  is_courtesy    Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deleted        Boolean     @default(false)
  deletedAt      DateTime?
  event          Event       @relation("selled_tickets", fields: [eventId], references: [id])
  access_type    AccessType? @relation("access_type", fields: [access_typeId], references: [id])
  ticket_type    OwnerType?  @relation("owner_types", fields: [owner_typeId], references: [id])
  order          Order?      @relation("order_items", fields: [orderId], references: [id])
}

// ================================ SEATING ================================
model SeatMap {
  id                  Int           @id @unique @default(autoincrement())
  name                String        @db.VarChar(50)
  description         String?       @db.VarChar(255)
  backround_image_url String        @db.VarChar(255)
  image_height        Int           @default(0)
  image_width         Int           @default(0)
  // seatSectionId       Int
  eventId             Int
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  deleted             Boolean       @default(false)
  deletedAt           DateTime?
  seat_section        SeatSection[]
}

enum SeatSectionType {
  ASSIGNED_SEATTING
  UNASSIGNED_SEATTING
  AREAS_OF_INTEREST
}

enum SeatAlignment {
  CENTER
  LEFT_ALIGN
  RIGHT_ALIGN
}

model SeatSection {
  id                   Int              @id @unique @default(autoincrement())
  name                 String           @db.VarChar(50)
  section_index        String           @db.VarChar(5)
  seat_alignment       SeatAlignment?   @default(CENTER)
  seat_section_type    SeatSectionType? @default(ASSIGNED_SEATTING)
  icon_url             String?          @db.VarChar(255)
  background_color     String?          @db.VarChar(7)
  text_caption_color   String?          @db.VarChar(7)
  capacity             Int?             @default(0)
  position_x           Int?             @default(0)
  position_y           Int?             @default(0)
  rotation             Int?             @default(0)
  seat_mapId           Int?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deleted              Boolean          @default(false)
  deletedAt            DateTime?
  seat_map             SeatMap?         @relation(fields: [seat_mapId], references: [id])
  rows_in_seat_section SeatRow[]        @relation("rows_in_seat_section")
}

model SeatRow {
  id             Int         @id @unique @default(autoincrement())
  row_index      String      @db.VarChar(5)
  seat_sectionId Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deleted        Boolean     @default(false)
  deletedAt      DateTime?
  seat_section   SeatSection @relation("rows_in_seat_section", fields: [seat_sectionId], references: [id])
  seats_in_row   Seat[]      @relation("seats_in_row")
}

enum SeatStatus {
  AVAILABLE
  UNAVAILABLE
  TEMPORARILY_UNAVAILABLE
  RESERVED
  TAKEN
}

model Seat {
  id                 Int        @id @unique @default(autoincrement())
  unique_seat_number String     @db.VarChar(5)
  seat_price         Decimal    @db.Money
  seat_status        SeatStatus @default(AVAILABLE)
  seat_rowId         Int
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deleted            Boolean    @default(false)
  deletedAt          DateTime?
  seat_row           SeatRow    @relation("seats_in_row", fields: [seat_rowId], references: [id])
}

// ================================ BUYING ================================
model PaymentCard {
  id               Int           @id @unique @default(autoincrement())
  is_credit_card   Boolean       @default(true)
  nick_name        String        @db.VarChar(255)
  owner_name       String        @db.VarChar(255)
  card_number      String        @unique @db.VarChar(255)
  expiration_date  String        @db.VarChar(255)
  country          String        @db.VarChar(255)
  is_default       Boolean       @default(false)
  user_clientId    Int
  payment_methodId Int           @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deleted          Boolean       @default(false)
  deletedAt        DateTime?
  payment_method   PaymentMethod @relation("payment_way", fields: [payment_methodId], references: [id])
  user_client      UserClient    @relation(fields: [user_clientId], references: [id])
}

enum PaymentMethodType {
  NONE
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  DEALER
  OXXO
}

model PaymentMethod {
  id                Int               @id @unique @default(autoincrement())
  payment_type      PaymentMethodType @default(NONE)
  description       String?           @db.VarChar(255)
  payment_reference String?           @db.VarChar(255)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deleted           Boolean           @default(false)
  deletedAt         DateTime?
  payment_card      PaymentCard?      @relation("payment_way")
  orders            Order[]           @relation("payment_method")
}

model Order {
  id                  Int               @id @unique @default(autoincrement())
  total_price         Decimal           @db.Money
  is_paid             Boolean?          @default(false)
  user_clientId       Int
  payment_methodId    Int
  authorized_dealerId Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deleted             Boolean           @default(false)
  deletedAt           DateTime?
  user_client         UserClient        @relation("orders", fields: [user_clientId], references: [id])
  selled_tickets      Ticket[]          @relation("order_items")
  payment_method      PaymentMethod     @relation("payment_method", fields: [payment_methodId], references: [id])
  autorized_dealer    AuthorizedDealer? @relation(fields: [authorized_dealerId], references: [id])
}

model PaymentRecibed {
  id                  Int               @id @unique @default(autoincrement())
  payment_date        DateTime          @db.Timestamp()
  payment_amount      Decimal           @db.Money
  is_confirmed        Boolean           @default(false)
  is_refunded         Boolean           @default(false)
  authorized_dealerId Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deleted             Boolean           @default(false)
  deletedAt           DateTime?
  authorized_dealer   AuthorizedDealer? @relation("dealer_recibed_payments", fields: [authorized_dealerId], references: [id])
}

// ================================ TICKET DISTRIBUTION =============================
model AuthorizedDealer {
  id               Int              @id @unique @default(autoincrement())
  name             String           @unique @db.VarChar(50)
  description      String?          @db.VarChar(255)
  telephone        String           @db.VarChar(15)
  email            String           @db.VarChar(100)
  commision        Decimal          @db.Money
  address          String           @db.VarChar(255)
  userId           Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deleted          Boolean          @default(false)
  deletedAt        DateTime?
  user             User?            @relation("authorized_dealers", fields: [userId], references: [id])
  recibed_payments PaymentRecibed[] @relation("dealer_recibed_payments")
  events           Event[]          @relation("dealer_of_event")
  orders           Order[]
}

enum CashLessType {
  VIRTUAL
  PAPER_STICKY
  PVC_CARD
  BRACELET
  RING
  CUSTOM
}

model CashlessDesign {
  id                        Int          @id @unique @default(autoincrement())
  name                      String       @db.VarChar(255)
  userId                    Int
  cashless_type             CashLessType
  //----- Required for VIRTUAL -------------
  virtual_image_url         String?      @db.VarChar(255)
  //----- Required for PAPER_STICKY --------
  paper_sticky_image_url    String?      @db.VarChar(255)
  //----- Required for PVC CARD -------------
  pv_card_image_url         String?      @db.VarChar(255)
  //----- Required for BRACELET -------------
  paper_band_image_url      String?      @db.VarChar(255) // <- This is required for paper bracelet
  chip_area_image_url       String?      @db.VarChar(255)
  band_image_url            String?      @db.VarChar(255)
  //----- Required for RING ----------------
  ring_image_url            String?      @db.VarChar(255)
  // ------ Required for CUSTOM ------------
  custom_design_plane_url   String?      @db.VarChar(255)
  require_leds              Boolean?     @default(false)
  number_of_leds            Int?
  led_color                 String?      @db.VarChar(255)
  require_batery            Boolean?     @default(false)
  require_case              Boolean?     @default(false)
  case_plane_image_url      String?      @db.VarChar(255)
  //----- Required for ALL -----------------
  unit_budget               Decimal      @db.Money
  aproximate_requered_units Int          @default(0)
  require_approval          Boolean      @default(true)
  is_aproved                Boolean      @default(false)
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  deleted                   Boolean      @default(false)
  deletedAt                 DateTime?
  cashless                  Cashless[]   @relation("cashless_design")
  designed_by               User         @relation("cashless_designs", fields: [userId], references: [id])
}

model Cashless {
  id                       Int              @id @unique @default(autoincrement())
  code                     String           @unique @db.VarChar(255)
  it_was_already_refounded Boolean          @default(false)
  user_clientId            Int              @unique
  cashless_designId        Int
  cashless_siteId          Int
  cashless_cashierId       Int
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  deleted                  Boolean          @default(false)
  deletedAt                DateTime?
  user_client              UserClient       @relation("cashless_mediums", fields: [user_clientId], references: [id])
  cashless                 CashlessDesign   @relation("cashless_design", fields: [cashless_designId], references: [id])
  delivery_on_site         CashlessSite     @relation("delivered_cashless", fields: [cashless_siteId], references: [id])
  delivered_by_cashier     CashlessCashier  @relation("delivered_cashless", fields: [cashless_cashierId], references: [id])
  refills                  CashlessRefill[] @relation("cashless_refill")
}

model CashlessSite {
  id                 Int              @id @unique @default(autoincrement())
  name               String           @db.VarChar(255)
  description        String?          @db.VarChar(255)
  where_is           String           @db.VarChar(255)
  userId             Int
  cashless_cashierId Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  deleted            Boolean          @default(false)
  deletedAt          DateTime?
  head_of_site       User             @relation("managers_on_cashless_site", fields: [userId], references: [id])
  delivered_cashless Cashless[]       @relation("delivered_cashless")
  cashless_cashier   CashlessCashier? @relation("cashless_site", fields: [cashless_cashierId], references: [id])
}

model CashlessRefill {
  id                  Int        @id @unique @default(autoincrement())
  money               Decimal    @db.Money
  user_clientId       Int
  cashlessId          Int
  money_boxId         Int
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  deleted             Boolean    @default(false)
  deletedAt           DateTime?
  user_client         UserClient @relation("cashless_refill", fields: [user_clientId], references: [id])
  cashless            Cashless   @relation("cashless_refill", fields: [cashlessId], references: [id])
  refill_in_money_box MoneyBox   @relation("refill_in_money_box", fields: [money_boxId], references: [id])
}

model MoneyBox {
  id                 Int              @id @unique @default(autoincrement())
  description        String
  init_money         Decimal          @db.Money
  final_money        Decimal          @db.Money
  total_box_flow     Decimal          @db.Money
  cashless_cashierId Int
  opened_byId        Int
  closed_byId        Int
  open_at            DateTime
  closed_at          DateTime?
  deleted            Boolean          @default(false)
  deletedAt          DateTime?
  opened_by          User             @relation("opened_money_boxes", fields: [opened_byId], references: [id])
  closed_by          User             @relation("closed_money_boxes", fields: [closed_byId], references: [id])
  cashless_cashier   CashlessCashier  @relation("money_box", fields: [cashless_cashierId], references: [id])
  cashless_refills   CashlessRefill[] @relation("refill_in_money_box")
}

model CashlessCashier {
  id                 Int            @id @unique @default(autoincrement())
  cashier_name       String         @db.VarChar(255)
  userId             Int
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deleted            Boolean        @default(false)
  deletedAt          DateTime?
  cashless_cashier   User           @relation("cashless_cashier", fields: [userId], references: [id])
  money_box          MoneyBox[]     @relation("money_box")
  cashless_site      CashlessSite[] @relation("cashless_site")
  delivered_cashless Cashless[]     @relation("delivered_cashless")
}
